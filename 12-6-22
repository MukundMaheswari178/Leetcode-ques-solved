287. Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.
soln-class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int m;
    sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            if(nums[i]==nums[i+1]){
                m=nums[i];
                return m;
                break;
            }
        }
        return m;
    }
};


136. Single Number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

soln-class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res=0;
        for(int x : nums){
            res=res^x;
        }
        return res;
    }
};

// class Solution {
// public:
//     int singleNumber(vector<int>& nums) {
//         int res=0;
//         for(int x:nums){
//             res^=x;
//         }
//         return res;
//     }
// };


137. Single Number II

Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

soln-class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int n;
        map<int,int>m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        
        map<int, int>::iterator itr;
        for(itr=m.begin();itr!=m.end();itr++){
            if(itr->second == 1){
                n=itr->first;
                return n;
                
            }
        }
        return n;
    }
};


260. Single Number III
Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.
 soln=class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> arr;
        int n;
        map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        
        map<int,int> ::iterator itr;
        for(itr=m.begin();itr!=m.end();itr++){
            if(itr->second ==1){
                n=itr->first;
                arr.push_back(n);
            }
        }
        return arr;
    }
};


4. Median of Two Sorted Arrays
Hard
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

soln-class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> arr;
        double median=0;
        int i=0,j=0;
       for( i=0;i<nums1.size();i++){
           arr.push_back(nums1[i]);
       }
        for( j=0;j<nums2.size();j++){
            arr.push_back(nums2[j]);
        }
        
        sort(arr.begin(),arr.end());
        int n=arr.size();
        if(n%2==0){
            n=n/2;
            median=arr[n-1]+arr[n];
            median=median/2;
            return median;
        }
        n=(n/2);
        median=arr[n];
        return median;
    }
};

 
 
