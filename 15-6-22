1920. Build Array from Permutation
Easy

1345

178

Add to List

Share
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

soln--class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            ans.push_back(nums[nums[i]]);
        }
        return ans;
    }
};


1929. Concatenation of Array
Easy

1095

195

Add to List

Share
Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).

Specifically, ans is the concatenation of two nums arrays.

Return the array ans.

soln--class Solution {
public:
    vector<int> getConcatenation(vector<int>& nums) {
      vector<int> ans;
        for(int j=0;j<2;j++){
        for(int i=0;i<nums.size();i++){
            ans.push_back(nums[i]);
        }
        }
        return ans;
    }
};

2180. Count Integers With Even Digit Sum
Easy

247

16

Add to List

Share
Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.

The digit sum of a positive integer is the sum of all its digits.

 

soln--class Solution {
public:
    int countEven(int num) {
        int sum=0;
        int count=0;
        
        for(int i=1;i<=num;i++){
           
            int m=i;
            while(m!=0){
                
            int rem=m%10;
            sum=sum+rem;
            m=m/10;
            }
            if(sum%2==0){
                count++;
            }
            sum=0;
        }
        return count;
    }
};
